version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  notify_slack:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  revert_migrations:
    steps:
      - run:
          name: Revert database migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/4zZ1b4NFt2ziX1o4pnyHBw/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if [ "$SUCCESS" == "1" ]
            then
                echo "Reverting database migrations if exists.........."
                cd backend
                npm install
                npm run migrations:revert
            fi
  install-awscli:
    steps:
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt-get upgrade -y
            apt install unzip curl -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack

  test-frontend:
    docker:
      - image: node:13.8.0-stretch-slim
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: node:13.8.0-stretch-slim
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm run test
  scan-frontend:
    docker:
      - image: node:13.8.0-stretch-slim
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: node:13.8.0-stretch-slim
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm i
            npm install --save-dev webpack@5.73.0
            npm update mkdirp --depth
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - destroy_environment
  configure-infrastructure:
    docker:
      - image: cimg/python:3.8.13
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ce:80:5e:73:a6:2c:b5:77:d5:16:53:c7:55:fb:43:45]
      - run:
          name: Install dependencies
          command: |
            sudo apt install tar gzip -y
            pip install awscli
            python3 -m pip install --upgrade --user ansible
            echo "export PATH=~/.local/bin:$PATH" > ~/.profile
            source ~/.profile
      - attach_workspace:
          at: .circleci/ansible
      # - create_dot_env
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment
  run-migrations:
    docker:
      - image: node:13.8.0-stretch-slim
    steps:
      - checkout
      - run:
          name: Instal dependencies
          command: |
            apt-get update
            apt-get upgrade -y
            apt install unzip curl -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/4zZ1b4NFt2ziX1o4pnyHBw/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy_environment
      - revert_migrations
  deploy-frontend:
    docker:
      - image: node:13.8.0-stretch-slim
    steps:
      - checkout
      - install-awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output=text)
            export BACKEND_DNS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicDnsName" \
            --output=text)
            export API_URL="http://${BACKEND_DNS}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_DNS}:3030" >> frontend/.env
            echo $API_URL > backend-dns.txt
            cat frontend/.env
      - persist_to_workspace:
          root: .
          paths:
            - backend-dns.txt
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Get public URL of frontend
          command: |
            echo "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
      - destroy_environment
      - revert_migrations
  deploy-backend:
    docker:
      - image: nikolaik/python-nodejs:python3.8-nodejs13
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ce:80:5e:73:a6:2c:b5:77:d5:16:53:c7:55:fb:43:45]
      - run:
          name: Install dependencies
          command: |
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg |  apt-key add -
            apt-get update
            apt-get upgrade -y
            apt install awscli -y
            python3 -m pip install --upgrade  ansible
            echo "export PATH=~/.local/bin:$PATH" > ~/.profile
            source ~/.profile
      - attach_workspace:
          at: .circleci/ansible
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment
      - revert_migrations
  smoke-test:
    docker:
      - image: node:13.8.0-stretch-slim
    steps:
      - checkout
      - install-awscli
      - attach_workspace:
          at: .
      - run:
          name: Backend smoke test.
          command: |
            export API_URL=$(cat backend-dns.txt)
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy_environment
      - revert_migrations
  cloudfront-update:
    docker:
      - image: node:13.8.0-stretch-slim
    steps:
      - checkout
      - install-awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo "${OldWorkflowID}"
            if [[ -z "$OldWorkflowID" ]]; then
              echo "This is the initial stack"
              export OldWorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            fi
            echo $OldWorkflowID >> old.txt
            echo $OldWorkflowID
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workfolow I: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: .
          paths:
            - old.txt
      - run: ls
      - destroy_environment
      - revert_migrations
  cleanup:
    docker:
      - image: alpine:3.16.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache aws-cli

      - attach_workspace:
          at: .

      - run:
          name: Get old stack workflow id
          command: |
            ls
            cat old.txt
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(cat old.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              echo "This is the only stack running"
            else
              echo "Removing the old stack........."
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          filters:
            branches:
              only: master
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          filters:
            branches:
              only: master
          context: udapeople
          requires: [deploy-infrastructure]
      - run-migrations:
          filters:
            branches:
              only: master
          context: udapeople
          requires: [configure-infrastructure]
      - deploy-frontend:
          filters:
            branches:
              only: master
          context: udapeople
          requires: [run-migrations]
      - deploy-backend:
          filters:
            branches:
              only: master
          context: udapeople
          requires: [run-migrations]
      - smoke-test:
          filters:
            branches:
              only: master
          context: udapeople
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          filters:
            branches:
              only: master
          context: udapeople
          requires: [smoke-test]
      - cleanup:
          filters:
            branches:
              only: master
          context: udapeople
          requires: [cloudfront-update]
